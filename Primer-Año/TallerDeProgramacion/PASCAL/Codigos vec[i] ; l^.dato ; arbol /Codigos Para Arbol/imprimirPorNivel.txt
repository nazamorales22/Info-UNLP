{-------------- TIPOS NECESARIOS --------------}

{-------------- UN ARBOL PARA IMPRIMIR --------------}

type
  arbol = ^nodoA;
  nodoA = record
    dato: integer;
    hi: arbol;
    hd: arbol;
  end;


{-------------- UNA LISTA DE DONDE CREAR EL ARBOL --------------}

  lista = ^nodoL;
  nodoL = record
    dato: integer;
    sig: lista;
  end;


{-------------- UNA LISTA NECESARIA PARA EL FUNCIONAMIENTO DEL IMPRIMIR --------------}

  ListaNivel = ^nodo3;
  nodo3 = record
    info: arbol;
    sig: ListaNivel;
  end;


{------------------------------------------ MODULOS DEL IMPRIMIR ------------------------------------------}

{-------------- CONTARELEMENTOS - Devuelve la cantidad de elementos de una lista l --------------}

function ContarElementos (l: listaNivel): integer;
var c: integer;
begin
  c:= 0;
  while (l <> nil) do begin
    c:= c+1;
    l:= l^.sig;
  end;
  contarElementos := c;
end;


{--------------- AGREGARATRAS - Agrega un elemento atras en l ----------------------------}

procedure AgregarAtras (var l, ult: listaNivel; a:arbol);
var
  nue:listaNivel;
begin
  new (nue);
  nue^.info := a;
  nue^.sig := nil;
  if l= nil then l:= nue
  else ult^.sig:= nue;
  ult:= nue;
end;


{------------------- IMPRIMIRPORNIVEL - Muestra los datos del arbol a por niveles ------------------------------------------}

procedure imprimirpornivel (a: arbol);
var
  l, aux, ult: listaNivel;
  nivel, cant, i: integer;
begin
  l:= nil;
  ult:=nil;
  if(a <> nil)then begin
    nivel:= 0;
    agregarAtras (l,ult,a);
    while (l<> nil) do begin
      nivel := nivel + 1;
      cant:= contarElementos(l);
      write ('Nivel ', nivel, ': ');
      for i:= 1 to cant do begin
        write (l^.info^.dato, ' - ');
        if (l^.info^.HI <> nil) then agregarAtras (l,ult,l^.info^.HI);
        if (l^.info^.HD <> nil) then agregarAtras (l,ult,l^.info^.HD);
        aux:= l;
        l:= l^.sig;
        dispose (aux);
      end;
      writeln;
    end;
  end;
end;